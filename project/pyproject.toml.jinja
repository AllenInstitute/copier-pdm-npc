[project]
name = "{{ python_package_distribution_name }}"
description = "{{ project_description }}"
authors = [
    {name = "{{ author_fullname }}", email = "{{ author_email }}"}
]
license = {text = "{{ copyright_license }}"}
readme = "README.md"
requires-python = "{{ python_package_requires_python }}"
dependencies = []
version = "{{ package_version }}"

classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
]

[project.urls]
Repository = "https://github.com/{{ repository_namespace }}/{{ repository_name }}"
Issues = "https://github.com/{{ repository_namespace }}/{{ repository_name }}/issues"

[project.scripts]
# write_dataframes = "npc_sessions.scripts.write_dataframes:main"


[tool.pdm.build]
package-dir = "src"

[build-system]
requires = [
    "setuptools>=61",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.pdm.dev-dependencies]
dev = [
    "pytest>=7.4.0",
    "ruff>=0.0.282",
    "mypy>=1.4.1",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "pytest-xdist>=3.3.1",
    ##
    "git-changelog>=2.3",
    "parver>=0.3",
]
docs = [
    "markdown-callouts>=0.3",
    "markdown-exec>=1.7",
    "mkdocs>=1.5",
    "mkdocs-coverage>=1.0",
    "mkdocs-gen-files>=0.5",
    "mkdocs-git-committers-plugin-2>=1.2",
    "mkdocs-git-revision-date-localized-plugin>=1.2",
    "mkdocs-literate-nav>=0.6",
    "mkdocs-material>=9.4",
    "mkdocs-minify-plugin>=0.7",
    "mkdocstrings[python]>=0.23",
    "tomli>=2.0; python_version < '3.11'",
]



[tool.pdm]
plugins = [
    "pdm-bump",
    "copier",
]

[tool.pdm.scripts]
ruff = "ruff check src --fix-only"
black = "black src"
test = "pytest --cov --cov-report=xml"
mypy = "mypy src --install-types --non-interactive"
{% if build_doc %}doc = {shell = "cd docs && mkdocs serve", help = "Start the dev server for doc preview"}{% endif %}
log = "git-changelog -o CHANGELOG.md"

[tool.pdm.scripts.prebuild]
composite = [
    "mypy",
    "test",
    "black",
    "ruff",
    "log",
]

[tool.pdm.scripts.dryrun]
composite = [
    "prebuild",
    "pdm publish --repository testpypi",
]

[tool.pdm.scripts.bumpver]
composite = [
    "pdm self add pdm-bump",
    "pdm bump micro",
]

[tool.pdm.scripts.tag]
composite = [
    "pdm self add pdm-bump",
    "pdm bump tag",
]

[tool.pdm.scripts.pub]
composite = [
    "prebuild",
    "bumpver",
    "pdm publish",
]

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.setuptools.package-data]
{{ python_package_import_name }} = [
    "py.typed",
]

[tool.black]
# line-length = 100
target-version = ["py39", "py310", "py311"]

[tool.ruff]
line-length = 100
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "E",    # pycodestyle
  "F",    # pyflakes
  "PGH",  # pygrep-hooks
  "RUF",  # ruff
  "W",    # pycodestyle
  "YTT",  # flake8-2020
    "ANN",
    "C",
    "I",
    "RUF100",
    "N",
    "UP",
]
# extend-ignore = ["B018", "B019"]
src = ["src"]
extend-exclude = ["tests/fixtures"]
target-version = "py39"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.mccabe]
max-complexity = 10

# [tool.ruff.isort]
# known-first-party = ["{{python_package_import_name}}"]


[tool.coverage.paths]
source = [
    "src",
]

[tool.coverage.run]
branch = true
source = [
    "src",
]

[tool.coverage.report]
skip_covered = true
show_missing = true
skip_empty = true
exclude_also = [
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@(abc.)?abstractmethod",
    "@typing.runtime_checkable",
]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--doctest-modules",
    "--ignore-glob=*scripts*,*examples*,*docs*",
    "--cov",
    "--cov-report=xml",
    "--cov-config=pyproject.toml",
    "--doctest-glob=*README.md",
    "-x",
    "-n=auto",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]
testpaths = [
    "src",
    "tests",
]

[tool.mypy]
check_untyped_defs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_any_unimported = false
warn_return_any = false
warn_unused_ignores = true
no_implicit_optional = true
show_error_codes = true
ignore_missing_imports = true
implicit_reexport = false
exclude = [
    "src/npc_sessions/plots",
    "src/npc_sessions/scripts",
]

[tool.isort]
profile = "black"
atomic = true
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = ["{{python_package_import_name}}"]
